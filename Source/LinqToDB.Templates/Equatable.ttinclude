<#
	{
		var beforeGenerateModel = BeforeGenerateModel;
		BeforeGenerateModel = () =>
		{
			beforeGenerateModel();
			EquatableImpl();
		};
	}
#><#+
public static bool DefaultEquatable = true;

Func<Class, Property, bool> EqualityPropertiesFilter = (cl, prop) => true;

void EquatableImpl()
{
	EqualityPropertiesFilter = (cl, prop) =>
	{
		if (!(cl is Table))
			return false;

		if (prop is ForeignKey)
			return false;

		if (prop is Column col)
			return col.IsPrimaryKey;

		return false;
	};

	foreach (Class cl in GetTreeNodes(Model).OfType<Class>().Where(c => c.IsEquatable && !c.IsStatic))
	{
		var props = GetTreeNodes(cl).OfType<Property>().Where(p => EqualityPropertiesFilter(cl, p)).ToList();
		if (props.Count > 0)
		{
			var className = cl.Name;

			if (!cl.Interfaces.Contains($"IEquatable<{className}>"))
			{
				cl.Interfaces.Add($"IEquatable<{className}>");

				if (!Model.Usings.Contains("LinqToDB.Tools.Comparers"))
					Model.Usings.Add("LinqToDB.Tools.Comparers");

				var comparerProperties = string.Join(", ", props.Select(p => $"c => c.{p.Name}"));

				cl.Members.Add(new MemberGroup
				{
					Region  = "IEquatable support",
					Members =
					{
						new MemberGroup
						{
							IsCompact = false,
							Members   =
							{
								new Property(() => $"IEqualityComparer<{className}>", "EqualityComparer",
									() => new[]
									{
										$"ComparerBuilder.GetEqualityComparer<{className}>({comparerProperties});"
									})
									{
										AccessModifier = AccessModifier.Private,
										IsStatic = true
									},

								new Method(() => "bool", "Equals",
									new Func<string>[]
									{
										() => $"{className} other"
									},
									() => new[]
									{
										$"return EqualityComparer.Equals(this, other);"
									}),

								new Method(() => "int", "GetHashCode", null,
									() => new[]
									{
										$"return EqualityComparer.GetHashCode(this);"
									})
									{
										IsOverride = true
									},

								new Method(() => "bool", "Equals",
									new Func<string>[]
									{
										() => $"object obj",
									},
									() => new[]
									{
										$"if (!(obj is {className} other))", "\treturn false;", string.Empty,
										"// use IEquatable implementation",
										"return Equals(other);"
									})
									{
										IsOverride = true
									}
							}
						}
					}
				});
			}
		}

		cl.SetTree();
	}
}

partial class Class
{
	public bool IsEquatable = DefaultEquatable;
}
#>
